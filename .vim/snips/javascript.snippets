snippet /** "jsdoc"
/**
 * ${1:description}
 * @param {${2:type string/Object/number etc}} ${3:name} ${4:description} 
 * @param {$5} $6
 * @return {${7:type}} ${8:description}
 */
endsnippet

snippet defaultvalue "default value in 1 line"
let ${1:variable1} = ${2:variable2} || ${3:default}
endsnippet

snippet loop "loop expression"
for(let i = 0; i < array.length; i++)

for(let key in object) {
  sum += object[key]
}

for(let value of array) 

[2,5,9].forEach(function(element, index, array) {
  // console.log
})
endsnippet

snippet checkifios "ios checking"
const isIOS = /iP(hone|(o|a)d)/.test(navigator.userAgent)
endsnippet

snippet arrayops "array operations"
// 追加
array.unshift('a')
array.push('z')
// 削除
'a' = array.shift();
'z' = array.pop();
// 部分的に
array.splice(1,2);
array.slice(1,2);
// 探索
1 = array.indexOf('b')
// 結合
array = array1.concat(array2)
endsnippet

snippet sort "array sort"
var numbers = [4, 2, 5, 1, 3];
numbers.sort(function(a, b) {
  return a - b;
});
endsnippet

snippet floor "floor"
// good
Math.floor(123.12)
// faster but only for small numbers
123.12 | 0
123.12>>0

// round
flt = 1.12
Math.round(flt)
(0.5 + flt) | 0
~~ (0.5 + flt)
(0.5 + flt) << 0
endsnippet

snippet normalize "normalize nuber 0 to 255"
// x = floor(max(255, min(0, x)))
x = x < 0 ? 0 : x > 255 ? 255 : x | 0
endsnippet

snippet canvas "canvas ctx sample"
const canvasImage = ctx.getImageData(0, 0, this.canvasWidth, this.canvasHeight)
const d = canvasImage.data
for (let i = 0, l = d.length; i < l; i += 4) {
	const r = d[i]
	const g = d[i + 1]
	const b = d[i + 2]
}
ctx.putImageData(canvasImage, 0, 0)

ctx.drawImage(canvas, destX, destY, destW, destH)  // ctxのサイズぴったりにcanvasを写す
endsnippet

snippet fasterfor "cache length first"
for (let i = 0, l = d.length; i < l; i += 4) {
endsnippet


snippet promise "promise pattern"
// 関数定義
function wait3sec(num) {
	console.log('hoge')
	return new Promise((resolve, reject) => {
		setTimeout(() => {
			if (num !== 0) {
				// .then()に入ってる関数を呼ぶ
				resolve('done')
			} else {
				// .catch()に入ってる関数を呼ぶ
				reject('error')
			}
		}, 3 * 1000)
	})
}

// 使う
wait3sec(5).then((message) => {
	console.log('finished', message)
}).catch((message) => {
	console.log('error occured', message)
})

// setTimeoutは使わないようにしよう
const wait = ms => new Promise(resolve => setTimeout(resolve, ms));

// 複数のpromiseの返り待ち
Promise.all([promise1, promise2, promise3]).then((values) => {
  console.log(values);
  });
}
endsnippet

snippet classdef "class definition"
// 定義
class Polygon {
	// コンストラクタ newで作成するときに呼ばれる
  constructor (height, width) {
    this.height = height;
    this.width = width;
  }

	get area () {
		return this.calcArea();
	}

	calcArea () {
		return this.height * this.width;
	}

	display () {
		console.log('display called', this.height, this.width);
	}
}
// インスタンス
const square = new Polygon(10, 10)
console.log(square.area)
square.display()
endsnippet

snippet module "ES6 module definition"
// X
export default class A {
	constructor () {
		this.x = 10
	}
}

// Y
import A from './hoge'
const a = new A()
console.log(a)

// X
const hoge = 'hoge'
export {hoge}

// Y
import {hoge as B} from './hoge'
console.log(B)

// X
export function hoge (x) {
	console.log(x)
}
export function hage (x) {

}

// Y type="module"
import {hoge, hage} from './hoge.js'
endsnippet


snippet time "時刻を取得する"
const now = new Date().getTime()  // ms old
const now = Date.now()  // UNIX time(ms) faster
const now = performance.now()  // ページ表示からの経過時間 ms
endsnippet

snippet errorfb ""
function(e) { console.error(e) }
endsnippet

snippet dg "getelementbyid" i
document.getElementById($1)
endsnippet


snippet objects "object methods"
var obj = {a: 'hoge', b: 'fuga'}
Object.values(obj)  # ['hoge', 'fuga']
Object.keys(obj)  # ['a', 'b']
Object.entries(obj)  # [['a', 'hoge'], ['b', 'fuga']]
endsnippet

snippet openblob "blob"
const elem = document.createElement('a')
const blob = new Blob([ content ], { "type" : "text/plain" })
elem.href = window.URL.createObjectURL(blob)
elem.click()
endsnippet

snippet error "raise error manually for debug"
try {
  throw new Error();
} catch (error) {
  console.error(error);
}
throw new Error("一般的なエラーだよ");
endsnippet

snippet base64 "base64"
// below two nodejs/browser code is compatible.
// nodejs https://stackoverflow.com/questions/23097928/node-js-throws-btoa-is-not-defined-error
// https://github.com/node-browser-compat/btoa/blob/master/index.js
const base64 = Buffer.from(binary_string, 'binary').toString('base64')
const binary_string = Buffer.from(base64, 'base64').toString('binary')

// browser
const base64 = btoa(binary_string)
const binary_string = atob(base64)

//pako
// ->
const next = { hoge: 'test' }
const packets_binstr = pako.gzip(JSON.stringify(next), { to: 'string' })
const b64 = btoa(packets_binstr)
// <-
const bstr = atob(b64)
const out = JSON.parse(pako.ungzip(bstr, { to: 'string' }))
console.log('check', next, b64, out)
endsnippet
